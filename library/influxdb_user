#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2014, Raphael Randschau <nicolai86@me.com>

DOCUMENTATION = '''
---
module: influxdb
short_description: manage influxdb clusters users
version_added: "0.1"
author: Raphael Randschau
options:
'''

EXAMPLES = '''
'''

import re
import os
import sys
import urllib2

class InfluxDBUserModule(object):
    params = None
    def __init__(self, params):
        self.params = params

    def host(self):
        return self.params.get('host')

    def build_request(self, url, method, data = ''):
        authorized_url = '%s?u=%s&p=%s' % (url, self.params.get('api_username'), self.params.get('api_password'))
        request = urllib2.Request(authorized_url, data=data)
        request.add_header('Content-Type', 'application/json')
        request.get_method = lambda: method
        return request

    def perform(self, url, method, data=''):
        opener = urllib2.build_opener(urllib2.HTTPHandler)

        request = self.build_request(url, method, data)
        data = opener.open(request, data)

        try:
            return (json.load(data), None)
        except Exception, e:
            return ('json error: %s - %s' % (e, url), e)

    def list_users(self):
        try:
            url = 'http://%s/cluster_admins' % (self.host())

            database = self.params.get('database', None)
            if database != None:
                url = 'http://%s/db/%s/users' % (self.host(), database)

            data, error = self.perform(url, 'GET')
            return (data, error)
        except Exception, e:
            return (None, e)

    def user_exists(self):
        (users, error) = self.list_users()
        if error != None:
            return (None, error)

        exists = False
        for user in users:
            exists = exists or (user['name'] == self.params.get('username'))

        return (exists, None)

    def add_user(self):
        (exists, error) = self.user_exists()
        if error != None:
            return { 'changed': False, rc: 1, 'stderr': '%s' % (error) }

        if exists:
            return { 'changed': False, 'rc': 0 }

        try:
            url = 'http://%s/cluster_admins' % (self.host())
            payload = {
                'name': self.params.get('username'),
                'password': self.params.get('password')
            }

            database = self.params.get('database', None)
            if database != None:
                url = 'http://%s/db/%s/users' % (self.host(), database)

                payload['isAdmin'] = self.params.get('database_admin', False)

            self.perform(url, 'POST', json.dumps(payload))
            return { 'changed': True, 'rc': 0 }
        except Exception, e:
            return { 'changed': False, 'rc': 1, 'stdout': '', 'stderr': '%s' % (e) }


    def delete_user(self):
        (exists, error) = self.user_exists()
        if error != None:
            return { 'changed': False, rc: 1, 'stderr': '%s' % (error) }

        if not exists:
            return { 'changed': False, 'rc': 0 }

        try:
            url = 'http://%s/cluster_admins/%s' % (self.host(), self.params.get('username'))

            database = self.params.get('database', None)
            if database != None:
                url = 'http://%s/db/%s/users/%s' % (self.host(), database, self.params.get('username'))

            self.perform(url, 'DELETE')
            return { 'changed': True, 'rc': 0 }
        except Exception, e:
            return { 'changed': False, 'rc': 1, 'stdout': '', 'stderr': '%s' % (e) }


def main():
    module = AnsibleModule(
        argument_spec = dict(
            host             = dict(required=True,  type='str'),
            api_username     = dict(required=True,  type='str'),
            api_password     = dict(required=True,  type='str'),
            username         = dict(required=True,  type='str'),
            password         = dict(required=True,  type='str'),
            database         = dict(required=False, type='str'),
            database_admin   = dict(required=False, type='bool'),
            state            = dict(required=False, type='str'),
        ),
        supports_check_mode = False,
        mutually_exclusive = [ ],
    )

    influxdb = InfluxDBUserModule(module.params)

    # TODO add support to update admin password
    # curl -X POST 'http://localhost:8086/cluster_admins/paul?u=root&p=root' -d '{"password": "new pass"}'

    # TODO per-database user

    # # update user's password
    # curl -X POST 'http://localhost:8086/db/site_dev/users/paul?u=root&p=root' \
    #   -d '{"password": "new pass"}'

    # # add database admin privilege
    # curl -X POST 'http://localhost:8086/db/site_dev/users/paul?u=root&p=root' \
    #   -d '{"admin": true}'

    # # remove database admin privilege
    # curl -X POST 'http://localhost:8086/db/site_dev/users/paul?u=root&p=root' \
    #   -d '{"admin": false}'

    # TODO read/ write access
    # {
    #   "name": "paul",
    #   "readFrom": ".*",
    #   "writeTo": ".*"
    # }

    # {
    #   "readFrom": "^$",
    #   "writeTo": ".*"
    # }

    state = module.params.get('state', 'present')
    if state == 'present':
        module.exit_json(**influxdb.add_user())
    else:
        module.exit_json(**influxdb.delete_user())

# import module snippets
from ansible.module_utils.basic import *

main()
